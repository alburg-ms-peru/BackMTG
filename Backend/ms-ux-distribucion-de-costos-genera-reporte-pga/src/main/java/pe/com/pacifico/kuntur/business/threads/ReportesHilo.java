package pe.com.pacifico.kuntur.business.threads;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lombok.RequiredArgsConstructor;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.server.ResponseStatusException;
import pe.com.pacifico.kuntur.business.ReportsService;
import pe.com.pacifico.kuntur.business.impl.ExcelServiceImpl;

/**
 * <b>Class</b>: ReportesHilo <br/>
 * <b>Copyright</b>: 2021 Pacifico Seguros - La Chakra <br/>.
 *
 * @author 2021  Pacifico Seguros - La Chakra <br/>
 * <u>Service Provider</u>: Soluciones Digitales <br/>
 * <u>Developed by</u>: Management Solutions <br/>
 * <u>Changes:</u><br/>
 * <ul>
 *   <li>
 *     Junio 10, 2021 Creaci√≥n de Clase.
 *   </li>
 * </ul>
 */
@RequiredArgsConstructor
public class ReportesHilo extends Thread  {

  public static Map<String, Thread> hilos = new HashMap<>();
  public static Map<String, Boolean> enEjecucion = new HashMap<>();
  public static Map<String, Resource> data = new HashMap<>();
  public final ReportsService service;
  public static String lastKey = null;
  public static List<String> dimensiones;
  public static List<String> lineas;
  public static List<String> canales;

  /**
     * This method is used to get start tne thread.
  */
  public static void begin(int reporte, int repartoTipo, int periodo, ReportsService service) {
    String key = reporte + "~" + repartoTipo + "~" + periodo;
    lastKey = key;
    Thread hilo = new ReportesHilo(service);
    hilo.start();
    hilos.put(key, hilo);
    enEjecucion.put(key, true);
  }

  /**
     * This method is used to get start tne thread of report #5.
  */
  public static void begin(int reporte, int repartoTipo, int periodo, ReportsService service,
                             List<String> dimensiones, List<String> lineas, List<String> canales) {
    String key = reporte + "~" + repartoTipo + "~" + periodo;
    lastKey = key;
    ReportesHilo.dimensiones = dimensiones;
    ReportesHilo.lineas = lineas;
    ReportesHilo.canales = canales;
    Thread hilo = new ReportesHilo(service);
    hilo.start();
    hilos.put(key, hilo);
    enEjecucion.put(key, true);
  }

  /**
   * Ejecucion del hilo.
   */
  public void run() {
    String key = lastKey;
    String[] splittedKey = key.split("~");
    int reporte = Integer.parseInt(splittedKey[0]);
    int repartoTipo = Integer.parseInt(splittedKey[1]);
    int periodo = Integer.parseInt(splittedKey[2]);
    Resource r = null;
    System.out.println("Gonna execute " + reporte);
    switch (reporte) {
      case 1:
        r = service.generateReporte1(repartoTipo, periodo);
        break;
      case 4:
        r = service.generateReporte4(repartoTipo, periodo);
        break;
      case 5:
        r = service.generateReporte5(repartoTipo, periodo, dimensiones, lineas, canales);
        break;
      case 6:
        r = service.generateReporte6(repartoTipo, periodo);
        break;
      case 7:
        r = service.generateReporte7(repartoTipo, periodo);
        break;
      case 8:
        r = service.generateReporte8(repartoTipo, periodo);
        break;
      default:
        break;
    }
    enEjecucion.put(key, false);
    data.put(key, r);
    System.out.println("Finished executing " + reporte);
  }

  /**
   * This method is used to get see if the report generation has ended.
  */
  public static boolean hasGenerationFinished(int reporte, int repartoTipo, int periodo) {
    String key = reporte + "~" + repartoTipo + "~" + periodo;
    return enEjecucion.getOrDefault(key, false);
  }

  /**
     * This method is used to obtain the data generated by the thread.
  */
  public static ResponseEntity<?> returnData(int reporte, int repartoTipo, int periodo) {

    String key = reporte + "~" + repartoTipo + "~" + periodo;
    if (data.get(key) == null && reporte == 5)
    {
      delete(key);
      throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
              "Combinacion de linea/canal no tiene resultados");
    }

    Resource resource = data.getOrDefault(key, new ExcelServiceImpl().crearResource(new SXSSFWorkbook()));
    String contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    ResponseEntity<?> dataToReturn = ResponseEntity.ok().contentType(MediaType.parseMediaType(contentType))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                .body(resource);

    delete(key);

    return dataToReturn;
  }

  /**
   * Deletes old element.
   */
  public static void delete(String key) {
    data.remove(key);
    enEjecucion.remove(key);
    hilos.remove(key);
  }
}
